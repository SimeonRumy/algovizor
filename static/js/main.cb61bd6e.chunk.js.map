{"version":3,"sources":["PathVizor/Node/Node.jsx","algorithms/commonMethods.js","algorithms/dijkstra.js","algorithms/astar.js","NavBar/NavBar.jsx","ButtonBar/ButtonBar.jsx","PathVizor/PathVizor.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","cost","extraClassName","id","className","Component","getUnvisitedNeighbors","node","grid","neighbors","push","length","getAllNeighbors","filter","neighbor","isVisited","resetNode","distance","Infinity","previousNode","dijkstra","startNode","finishNode","console","log","visitedNodesInOrder","unvisitedNodes","nodes","getAllNodes","i","sortNodesByDistance","closestNode","shift","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","astar","setEuclideanDistance","getAllNodesWithEuclideanDistance","euclideanDistance","Math","sqrt","pow","NavBar","state","algoNumber","buttonText","handleAlgoChange","bind","runAlgo","text","number","setState","bfs","onDijkstra","onAstar","onBFS","onReset","Navbar","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","onClick","Form","inline","Button","ButtonBar","costNumber","onSetStartButtonClick","onSetFinishButtonClick","onSetWAllsButtonClick","onSetCostlyNodes","PathVizor","mouseIsPressed","setWallsButtonIsPressed","setStartButtonIsPressed","setFinishButtonIsPresed","setCostButtonIsPressed","startNodeRow","startNodeColumn","finishNodeRow","finishNodeColumn","shortestPathDistance","calculateRowNumber","currentRow","calculateColumnNumber","initNode","setupIntialGrid","newGrid","reactToMouseAction","toggleWallInGrid","resetGoalNodes","toggleStartNodeInGrid","toggleFinishNodeInGrid","updateNodeCostInGrid","visitedNodesOrdered","nodesOfTheShortestPathOrdered","setTimeout","animateShortestPath","document","getElementById","start","end","searchAndReplace","algo","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","visualizeAlgorithm","resetGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","width","documentElement","clientWidth","round","height","clientHeight","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb61bd6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n      cost,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n        ? 'node-start'\n        : isWall\n          ? 'node-wall'\n          : (cost === 1)\n            ? 'node-costly1'\n            : (cost === 2)\n              ? 'node-costly2'\n              : (cost === 3)\n                ? 'node-costly3'\n                : \"\"\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}>\n      </div>\n    );\n  }\n}\n","// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\nexport function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    getAllNeighbors(node, neighbors, grid);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n\nfunction getAllNeighbors(node, neighbors, grid) {\n    const { col, row } = node;\n    if (row > 0)\n        neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1)\n        neighbors.push(grid[row + 1][col]);\n    if (col > 0)\n        neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1)\n        neighbors.push(grid[row][col + 1]);\n}\n\nexport function resetNode(node) {\n    node.distance = Infinity;\n    node.isVisited = false;\n    node.previousNode = null;\n}","\nimport { getUnvisitedNeighbors, resetNode } from '../algorithms/commonMethods';\n\n\nexport function dijkstra(grid, startNode, finishNode) {\n  console.log(startNode)\n  const visitedNodesInOrder = [];\n  const unvisitedNodes = getAllNodes(grid);\n  startNode.distance = 0;\n  var i = 0\n  for (i = 0; unvisitedNodes.length; i++) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.isWall) continue; // Ignore wall\n    if (closestNode.distance === Infinity) return visitedNodesInOrder; // If distance === infinity we are trapped\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1 + neighbor.cost;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      resetNode(node);\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n\n","import { getUnvisitedNeighbors, resetNode } from '../algorithms/commonMethods';\n\nexport function astar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    const unvisitedNodes = getAllNodesWithEuclideanDistance(grid, finishNode);\n    startNode.distance = 0;\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => (nodeA.distance - nodeB.distance) + (nodeB.euclideanDistance));\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getAllNodesWithEuclideanDistance(grid, finishNode) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            resetNode(node)\n            setEuclideanDistance(node, finishNode);\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\nfunction setEuclideanDistance(node, finishNode) {\n    node.euclideanDistance = Math.sqrt(Math.pow(2, (node.row - finishNode.row)) + Math.pow(2, node.col - finishNode.col));\n}\n\n","import React, { Component } from 'react';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap'\nimport './NavBar.css';\n\n\nexport default class NavBar extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            algoNumber: 0,\n            buttonText: \"\"\n        };\n        this.handleAlgoChange = this.handleAlgoChange.bind(this);\n        this.runAlgo = this.runAlgo.bind(this);\n    }\n\n\n    handleAlgoChange(text, number) {\n        this.setState({ algoNumber: number, buttonText: text })\n    }\n\n    runAlgo(dijkstra, astar, bfs) {\n        if (this.state.algoNumber === 0) {\n            return dijkstra();\n        } else if (this.state.algoNumber === 1) {\n            return astar();\n        } else {\n            return bfs();\n        }\n    }\n\n    render() {\n        const {\n            onDijkstra,\n            onAstar,\n            onBFS,\n            onReset,\n        } = this.props;\n\n        return (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">Algo Vizor</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link href=\"#home\">Home</Nav.Link>\n                            <Nav.Link href=\"#link\">About</Nav.Link>\n                            <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\n                                <NavDropdown.Item href=\"#action/3.2\" onClick={() => this.handleAlgoChange(\"Dijkstras\", 0)}>Dijkstras</NavDropdown.Item>\n                                <NavDropdown.Item href=\"#action/3.2\" onClick={() => this.handleAlgoChange(\"A-Star\", 1)}>A-Star</NavDropdown.Item>\n                                <NavDropdown.Item href=\"#action/3.3\" onClick={() => this.handleAlgoChange(\"BFS\", 2)}>BFS</NavDropdown.Item>\n                            </NavDropdown>\n                        </Nav>\n                        <Form inline>\n                            <Button className=\"ml-2\" variant=\"outline-success btn-lg\" onClick={() => this.runAlgo(onDijkstra, onAstar, onBFS)}>Run {this.state.buttonText} Algorithm</Button>\n                            <Button className=\"ml-2\" variant=\"outline-danger btn-lg\" onClick={() => onReset()}>Reset</Button>\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\n\n","import React, { Component } from 'react';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button, DropdownButton, ButtonGroup, Dropdown } from 'react-bootstrap'\n\n\nexport default class ButtonBar extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            costNumber: 0,\n            buttonText: \"\"\n        };\n    }\n\n    render() {\n        const {\n            onSetStartButtonClick,\n            onSetFinishButtonClick,\n            onSetWAllsButtonClick,\n            onSetCostlyNodes,\n        } = this.props;\n\n        return (\n            <div>\n                <Navbar bg=\"ligth\" variant=\"ligth\">\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"ml-auto\">\n                            <Button className=\"ml-3 mr-3\" variant=\"secondary btn-md\" onClick={() => onSetStartButtonClick()}>Set Start</Button>\n                            <Button className=\"ml-3 mr-3\" variant=\"secondary btn-md\" onClick={() => onSetFinishButtonClick()}>Set Finish</Button>\n\n                            {/* <ButtonGroup>\n                                <Button variant=\"secondary btn-md\">{this.state.costNumber}</Button>\n\n                                <DropdownButton as={ButtonGroup} title=\"Add Costly Nodes\" id=\"bg-nested-dropdown\" variant=\"secondary btn-md\">\n                                    <Dropdown.Item onClick={() => this.setState({ costNumber: 1 })}>Cost 1</Dropdown.Item>\n                                    <Dropdown.Item onClick={() => this.setState({ costNumber: 2 })}>Cost 3</Dropdown.Item>\n                                    <Dropdown.Item onClick={() => this.setState({ costNumber: 3 })}>Cost 2</Dropdown.Item>\n                                </DropdownButton>\n\n                            </ButtonGroup> */}\n                            <Button className=\"ml-3 mr-3\" variant=\"secondary btn-md\" onClick={() => onSetCostlyNodes()}>Add Costly Nodes</Button>\n\n                            <Button className=\"ml-3 mr-0\" variant=\"secondary btn-md\" onClick={() => onSetWAllsButtonClick()}>Add Walls</Button>\n                        </Nav>\n\n                    </Navbar.Collapse>\n                </Navbar>\n            </div >\n        );\n    }\n}","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { getNodesInShortestPathOrder } from '../algorithms/commonMethods';\nimport { dijkstra } from '../algorithms/dijkstra';\nimport { astar } from '../algorithms/astar';\nimport NavBar from '../NavBar/NavBar'\nimport ButtonBar from '../ButtonBar/ButtonBar'\n\nimport './PathVizor.css';\n\nexport default class PathVizor extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      setWallsButtonIsPressed: false,\n      setStartButtonIsPressed: false,\n      setFinishButtonIsPresed: false,\n      setCostButtonIsPressed: false,\n      startNodeRow: 10,\n      startNodeColumn: 15,\n      finishNodeRow: 10,\n      finishNodeColumn: 35,\n      shortestPathDistance: 0\n    };\n  }\n\n  componentDidMount() {\n    const { startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow } = this.state;\n    const grid = setupIntialGrid(startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = this.reactToMouseAction(row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.reactToMouseAction(row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  reactToMouseAction(row, col) {\n    var newGrid = this.state.grid;\n    if (this.state.setWallsButtonIsPressed) {\n      newGrid = toggleWallInGrid(this.state.grid, row, col);\n    } else if (this.state.setStartButtonIsPressed) {\n      this.resetGoalNodes(true, false)\n      newGrid = this.state.grid\n      newGrid = toggleStartNodeInGrid(newGrid, row, col);\n      this.setState({ startNodeRow: row });\n      this.setState({ startNodeColumn: col });\n    } else if (this.state.setFinishButtonIsPresed) {\n      this.resetGoalNodes(false, true)\n      newGrid = this.state.grid\n      newGrid = toggleFinishNodeInGrid(newGrid, row, col);\n      this.setState({ finishNodeRow: row });\n      this.setState({ finishNodeColumn: col });\n    } else if (this.state.setCostButtonIsPressed) {\n      newGrid = updateNodeCostInGrid(newGrid, row, col);\n    }\n    return newGrid;\n  }\n\n  animateAlgorithm(visitedNodesOrdered, nodesOfTheShortestPathOrdered) {\n    for (let i = 0; i <= visitedNodesOrdered.length; i++) {\n      if (i === visitedNodesOrdered.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesOfTheShortestPathOrdered);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesOrdered[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesOfTheShortestPathOrdered) {\n    this.setState({ shortestPathDistance: nodesOfTheShortestPathOrdered.length });\n    for (let i = 0; i < this.state.shortestPathDistance; i++) {\n      setTimeout(() => {\n        const node = nodesOfTheShortestPathOrdered[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  resetGoalNodes(start, end) {\n    var newGrid = this.state.grid;\n    newGrid = this.searchAndReplace(start, newGrid, end);\n    this.setState({ grid: newGrid });\n  }\n\n  searchAndReplace(start, newGrid, end) {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        if (node.isStart && start) {\n          newGrid = toggleStartNodeInGrid(this.state.grid, node.row, node.col);\n          return;\n        } else if (node.isFinish && end) {\n          newGrid = toggleFinishNodeInGrid(this.state.grid, node.row, node.col);\n          return;\n        }\n      }\n    }\n    return newGrid;\n  }\n\n\n  visualizeAlgorithm(algo) {\n    this.setState({ setStartButtonIsPressed: false, setFinishButtonIsPresed: false, setWallsButtonIsPressed: false })\n    const { grid } = this.state;\n    const { startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow } = this.state;\n    const startNode = grid[startNodeRow][startNodeColumn];\n    const finishNode = grid[finishNodeRow][finishNodeColumn];\n    const visitedNodesInOrder = algo(grid, startNode, finishNode);\n    console.log(visitedNodesInOrder.length)\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    console.log(nodesInShortestPathOrder.length)\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  resetGrid() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        if (node.isStart) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-start';\n        } else if (node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-finish';\n        } else if (node.isWall) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-wall';\n        } else if (node.cost > 1) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-costly1';\n        }\n        else {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node';\n        }\n      }\n    }\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    const { startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow } = this.state;\n\n    return (\n      <>\n        <NavBar\n          onDijkstra={() => this.visualizeAlgorithm(dijkstra)}\n          onAstar={() => this.visualizeAlgorithm(astar)}\n          onBFS={() => this.visualizeAlgorithm(dijkstra)}\n          onReset={() => this.resetGrid()}>\n        </NavBar>\n\n        <ButtonBar\n          onSetStartButtonClick={() => this.setState({ setStartButtonIsPressed: true, setFinishButtonIsPresed: false, setWallsButtonIsPressed: false, setCostButtonIsPressed: false })}\n          onSetFinishButtonClick={() => this.setState({ setStartButtonIsPressed: false, setFinishButtonIsPresed: true, setWallsButtonIsPressed: false, setCostButtonIsPressed: false })}\n          onSetWAllsButtonClick={() => this.setState({ setStartButtonIsPressed: false, setFinishButtonIsPresed: false, setWallsButtonIsPressed: true, setCostButtonIsPressed: false })}\n          onSetCostlyNodes={() => this.setState({ setStartButtonIsPressed: false, setFinishButtonIsPresed: false, setWallsButtonIsPressed: false, setCostButtonIsPressed: true })}\n        ></ButtonBar>\n\n        <h3 className=\"distanceLabel\">Shortest distance: {this.state.shortestPathDistance}</h3>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall, cost } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      cost={cost}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}>\n                    </Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n\n      </>\n    );\n  }\n}\n\n// win.innerWidth || docElem.clientWidth || body.clientWidth\n// win.innerHeight || docElem.clientHeight || body.clientHeight\n// body = doc.getElementsByTagName('body')[0],\n// win = window\n\nfunction setupIntialGrid(startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow) {\n  const grid = [];\n  for (let row = 0; row < calculateRowNumber(); row++) {\n    const currentRow = [];\n    for (let col = 0; col < calculateColumnNumber(); col++) {\n      currentRow.push(initNode(col, row, startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n}\n\nconst calculateColumnNumber = () => {\n  var doc = document,\n    docElem = doc.documentElement,\n    width = docElem.clientWidth,\n    numberOfColumns = Math.round((width - 0.05 * width) / 25);\n  return numberOfColumns;\n}\n\nconst calculateRowNumber = () => {\n  var doc = document,\n    docElem = doc.documentElement,\n    height = docElem.clientHeight,\n    numberOfRows = Math.round((height - (0.1 * height) - 120) / 25);\n  return numberOfRows;\n}\n\nconst initNode = (col, row, startNodeRow, startNodeColumn, finishNodeColumn, finishNodeRow) => {\n  return {\n    col,\n    row,\n    isStart: row === startNodeRow && col === startNodeColumn,\n    isFinish: row === finishNodeRow && col === finishNodeColumn,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    cost: 0\n  };\n};\n\nconst updateNodeCostInGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newCost = (node.cost === 0) ? 1 : (node.cost === 1) ? 2 : (node.cost === 2) ? 3 : (node.cost === 3) ? 0 : 0\n  const newNode = {\n    ...node,\n    cost: newCost,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n\n}\n\nconst toggleStartNodeInGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: false,\n    isStart: !node.isStart,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst toggleFinishNodeInGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: false,\n    isFinish: !node.isFinish,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst toggleWallInGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathVizor/PathVizor.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}